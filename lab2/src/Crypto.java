import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

/**
 * This class contains everything which concerns security of the system.
 * @author Fani
 *
 */
public class Crypto {
	/**
	 * Returns a new random vector.
	 * @param num number of bytes in the generated byte array
	 * @return random byte array of a given size.
	 */
	public static byte[] getRandom(int num) {
        byte[] rand = new byte[num];
        new SecureRandom().nextBytes(rand);
        return rand;
    }
	
	/**
	 * Returns a derived key from the given password and salt.
	 * @param password the master password
	 * @param salt random byte array representing a random secure number
	 * @return derived key for encryption.
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeySpecException
	 */
    public static byte[] getHash(char[] password, byte[] salt) 
    		throws NoSuchAlgorithmException, InvalidKeySpecException {
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256"); 
        KeySpec spec = new PBEKeySpec(password, salt, 131072, 256); 
        SecretKey key = factory.generateSecret(spec);
        return key.getEncoded();
    }
    
    /**
     * Cleans out the given character array.
     * @param chars array which is cleaned out.
     */
    public static void clean(char[] chars) {
		for (int i = 0; i < chars.length; i++) {
		    chars[i] = '\0';
		}
	}
    
	/**
	 * Checks if the password is complex enough.
	 * @param password
	 * @return true if the password is complex enough, false otherwise.
	 */
	public static boolean complexEnough(char[] password) {
		if(password.length < 8) return false;
		boolean lowerCase = false;
		boolean upperCase = false;
		boolean digit = false;
		for(int i = 0; i < password.length; i++) {
			char c = password[i];
			if(c >= '0' && c <= '9') digit = true;
			if(c >= 'A' && c <= 'Z') upperCase = true;
			if(c >= 'a' && c <= 'z') lowerCase = true;
		}
		return lowerCase && upperCase && digit;
	}
}
